{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Edeki Okoh1\\\\Desktop\\\\Modellytics\\\\Mobile\\\\EyeQ\\\\node_modules\\\\react-navigation-tabs\\\\src\\\\utils\\\\createTabNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, NavigationActions } from '@react-navigation/core';\nexport default function createTabNavigator(TabView) {\n  var NavigationView = function (_React$Component) {\n    _inherits(NavigationView, _React$Component);\n\n    var _super = _createSuper(NavigationView);\n\n    function NavigationView() {\n      var _this;\n\n      _classCallCheck(this, NavigationView);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n\n      _this._renderScene = function (_ref) {\n        var route = _ref.route;\n        var _this$props = _this.props,\n            screenProps = _this$props.screenProps,\n            descriptors = _this$props.descriptors;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 9\n          }\n        });\n      };\n\n      _this._renderIcon = function (_ref2) {\n        var route = _ref2.route,\n            _ref2$focused = _ref2.focused,\n            focused = _ref2$focused === void 0 ? true : _ref2$focused,\n            tintColor = _ref2.tintColor,\n            _ref2$horizontal = _ref2.horizontal,\n            horizontal = _ref2$horizontal === void 0 ? false : _ref2$horizontal;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused: focused,\n            tintColor: tintColor,\n            horizontal: horizontal\n          }) : options.tabBarIcon;\n        }\n\n        return null;\n      };\n\n      _this._getButtonComponent = function (_ref3) {\n        var route = _ref3.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarButtonComponent) {\n          return options.tabBarButtonComponent;\n        }\n\n        return null;\n      };\n\n      _this._getLabelText = function (_ref4) {\n        var route = _ref4.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n\n        return route.routeName;\n      };\n\n      _this._getAccessibilityLabel = function (_ref5) {\n        var route = _ref5.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n          return options.tabBarAccessibilityLabel;\n        }\n\n        var label = _this._getLabelText({\n          route: route\n        });\n\n        if (typeof label === 'string') {\n          var routes = _this.props.navigation.state.routes;\n          return label + \", tab, \" + (routes.indexOf(route) + 1) + \" of \" + routes.length;\n        }\n      };\n\n      _this._getTestID = function (_ref6) {\n        var route = _ref6.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarTestID;\n      };\n\n      _this._makeDefaultHandler = function (_ref7) {\n        var route = _ref7.route,\n            navigation = _ref7.navigation;\n        return function () {\n          if (navigation.isFocused()) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(StackActions.popToTop({\n                key: route.key\n              }));\n            } else {\n              navigation.emit('refocus');\n            }\n          } else {\n            _this._jumpTo(route.routeName);\n          }\n        };\n      };\n\n      _this._handleTabPress = function (_ref8) {\n        var route = _ref8.route;\n        _this._isTabPress = true;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n            options = descriptor.options;\n\n        var defaultHandler = _this._makeDefaultHandler({\n          route: route,\n          navigation: navigation\n        });\n\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation: navigation,\n            defaultHandler: defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      };\n\n      _this._handleTabLongPress = function (_ref9) {\n        var route = _ref9.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n            options = descriptor.options;\n\n        var defaultHandler = _this._makeDefaultHandler({\n          route: route,\n          navigation: navigation\n        });\n\n        if (options.tabBarOnLongPress) {\n          options.tabBarOnLongPress({\n            navigation: navigation,\n            defaultHandler: defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      };\n\n      _this._handleIndexChange = function (index) {\n        if (_this._isTabPress) {\n          _this._isTabPress = false;\n          return;\n        }\n\n        _this._jumpTo(_this.props.navigation.state.routes[index].routeName);\n      };\n\n      _this._handleSwipeStart = function () {\n        _this.setState({\n          isSwiping: true\n        });\n      };\n\n      _this._handleSwipeEnd = function () {\n        _this.setState({\n          isSwiping: false\n        });\n      };\n\n      _this._jumpTo = function (routeName) {\n        return _this.props.navigation.dispatch(NavigationActions.navigate({\n          routeName: routeName\n        }));\n      };\n\n      _this._isTabPress = false;\n      return _this;\n    }\n\n    _createClass(NavigationView, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props2 = this.props,\n            descriptors = _this$props2.descriptors,\n            navigation = _this$props2.navigation,\n            screenProps = _this$props2.screenProps;\n        var state = navigation.state;\n        var route = state.routes[state.index];\n        var descriptor = descriptors[route.key];\n\n        var options = _objectSpread(_objectSpread({}, this.props.navigationConfig), descriptor.options);\n\n        return React.createElement(TabView, _extends({}, options, {\n          getLabelText: this._getLabelText,\n          getButtonComponent: this._getButtonComponent,\n          getAccessibilityLabel: this._getAccessibilityLabel,\n          getTestID: this._getTestID,\n          renderIcon: this._renderIcon,\n          renderScene: this._renderScene,\n          onIndexChange: this._handleIndexChange,\n          onTabPress: this._handleTabPress,\n          onTabLongPress: this._handleTabLongPress,\n          navigation: navigation,\n          descriptors: descriptors,\n          screenProps: screenProps,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n\n    return NavigationView;\n  }(React.Component);\n\n  return function (routes) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var router = TabRouter(routes, config);\n    return createNavigator(NavigationView, router, config);\n  };\n}","map":{"version":3,"sources":["C:/Users/Edeki Okoh1/Desktop/Modellytics/Mobile/EyeQ/node_modules/react-navigation-tabs/src/utils/createTabNavigator.js"],"names":["React","TabRouter","StackActions","SceneView","createNavigator","NavigationActions","createTabNavigator","TabView","NavigationView","_renderScene","route","props","screenProps","descriptors","descriptor","key","TabComponent","getComponent","navigation","_renderIcon","focused","tintColor","horizontal","options","tabBarIcon","_getButtonComponent","tabBarButtonComponent","_getLabelText","tabBarLabel","title","routeName","_getAccessibilityLabel","tabBarAccessibilityLabel","label","routes","state","indexOf","length","_getTestID","tabBarTestID","_makeDefaultHandler","isFocused","hasOwnProperty","index","dispatch","popToTop","emit","_jumpTo","_handleTabPress","_isTabPress","defaultHandler","tabBarOnPress","_handleTabLongPress","tabBarOnLongPress","_handleIndexChange","_handleSwipeStart","setState","isSwiping","_handleSwipeEnd","navigate","navigationConfig","Component","config","router"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport {\r\n  TabRouter,\r\n  StackActions,\r\n  SceneView,\r\n  createNavigator,\r\n  NavigationActions,\r\n} from '@react-navigation/core';\r\n\r\nexport type InjectedProps = {\r\n  getLabelText: (props: { route: any }) => any,\r\n  getAccessibilityLabel: (props: { route: any }) => string,\r\n  getTestID: (props: { route: any }) => string,\r\n  getButtonComponent: (props: { route: any }) => ?React.Component<*>,\r\n  renderIcon: (props: {\r\n    route: any,\r\n    focused: boolean,\r\n    tintColor: string,\r\n    horizontal: boolean,\r\n  }) => React.Node,\r\n  renderScene: (props: { route: any }) => ?React.Node,\r\n  onIndexChange: (index: number) => any,\r\n  onTabPress: (props: { route: any }) => mixed,\r\n  onTabLongPress: (props: { route: any }) => mixed,\r\n  navigation: any,\r\n  descriptors: any,\r\n  screenProps?: any,\r\n};\r\n\r\nexport default function createTabNavigator(TabView: React.ComponentType<*>) {\r\n  class NavigationView extends React.Component<*, *> {\r\n    _renderScene = ({ route }) => {\r\n      const { screenProps, descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const TabComponent = descriptor.getComponent();\r\n      return (\r\n        <SceneView\r\n          screenProps={screenProps}\r\n          navigation={descriptor.navigation}\r\n          component={TabComponent}\r\n        />\r\n      );\r\n    };\r\n\r\n    _renderIcon = ({\r\n      route,\r\n      focused = true,\r\n      tintColor,\r\n      horizontal = false,\r\n    }) => {\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const options = descriptor.options;\r\n\r\n      if (options.tabBarIcon) {\r\n        return typeof options.tabBarIcon === 'function'\r\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\r\n          : options.tabBarIcon;\r\n      }\r\n\r\n      return null;\r\n    };\r\n\r\n    _getButtonComponent = ({ route }) => {\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const options = descriptor.options;\r\n\r\n      if (options.tabBarButtonComponent) {\r\n        return options.tabBarButtonComponent;\r\n      }\r\n\r\n      return null;\r\n    };\r\n\r\n    _getLabelText = ({ route }) => {\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const options = descriptor.options;\r\n\r\n      if (options.tabBarLabel) {\r\n        return options.tabBarLabel;\r\n      }\r\n\r\n      if (typeof options.title === 'string') {\r\n        return options.title;\r\n      }\r\n\r\n      return route.routeName;\r\n    };\r\n\r\n    _getAccessibilityLabel = ({ route }) => {\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const options = descriptor.options;\r\n\r\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\r\n        return options.tabBarAccessibilityLabel;\r\n      }\r\n\r\n      const label = this._getLabelText({ route });\r\n\r\n      if (typeof label === 'string') {\r\n        const { routes } = this.props.navigation.state;\r\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\r\n          routes.length\r\n        }`;\r\n      }\r\n    };\r\n\r\n    _getTestID = ({ route }) => {\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const options = descriptor.options;\r\n\r\n      return options.tabBarTestID;\r\n    };\r\n\r\n    _makeDefaultHandler = ({ route, navigation }) => () => {\r\n      if (navigation.isFocused()) {\r\n        if (route.hasOwnProperty('index') && route.index > 0) {\r\n          // If current tab has a nested navigator, pop to top\r\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\r\n        } else {\r\n          navigation.emit('refocus');\r\n        }\r\n      } else {\r\n        this._jumpTo(route.routeName);\r\n      }\r\n    };\r\n\r\n    _handleTabPress = ({ route }) => {\r\n      this._isTabPress = true;\r\n\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const { navigation, options } = descriptor;\r\n\r\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\r\n\r\n      if (options.tabBarOnPress) {\r\n        options.tabBarOnPress({ navigation, defaultHandler });\r\n      } else {\r\n        defaultHandler();\r\n      }\r\n    };\r\n\r\n    _handleTabLongPress = ({ route }) => {\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const { navigation, options } = descriptor;\r\n\r\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\r\n\r\n      if (options.tabBarOnLongPress) {\r\n        options.tabBarOnLongPress({ navigation, defaultHandler });\r\n      } else {\r\n        defaultHandler();\r\n      }\r\n    };\r\n\r\n    _handleIndexChange = index => {\r\n      if (this._isTabPress) {\r\n        this._isTabPress = false;\r\n        return;\r\n      }\r\n\r\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\r\n    };\r\n\r\n    _handleSwipeStart = () => {\r\n      this.setState({ isSwiping: true });\r\n    };\r\n\r\n    _handleSwipeEnd = () => {\r\n      this.setState({ isSwiping: false });\r\n    };\r\n\r\n    _jumpTo = routeName =>\r\n      this.props.navigation.dispatch(NavigationActions.navigate({ routeName }));\r\n\r\n    _isTabPress: boolean = false;\r\n\r\n    render() {\r\n      const { descriptors, navigation, screenProps } = this.props;\r\n      const { state } = navigation;\r\n      const route = state.routes[state.index];\r\n      const descriptor = descriptors[route.key];\r\n      const options = {\r\n        ...this.props.navigationConfig,\r\n        ...descriptor.options,\r\n      };\r\n\r\n      return (\r\n        <TabView\r\n          {...options}\r\n          getLabelText={this._getLabelText}\r\n          getButtonComponent={this._getButtonComponent}\r\n          getAccessibilityLabel={this._getAccessibilityLabel}\r\n          getTestID={this._getTestID}\r\n          renderIcon={this._renderIcon}\r\n          renderScene={this._renderScene}\r\n          onIndexChange={this._handleIndexChange}\r\n          onTabPress={this._handleTabPress}\r\n          onTabLongPress={this._handleTabLongPress}\r\n          navigation={navigation}\r\n          descriptors={descriptors}\r\n          screenProps={screenProps}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (routes: *, config: * = {}) => {\r\n    const router = TabRouter(routes, config);\r\n    return createNavigator(NavigationView, router, config);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}