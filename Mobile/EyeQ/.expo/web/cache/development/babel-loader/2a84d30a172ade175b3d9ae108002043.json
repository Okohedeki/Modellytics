{"ast":null,"code":"var validateFormat = function validateFormat() {};\n\nif (__DEV__) {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1;\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","map":{"version":3,"sources":["C:/Users/Edeki Okoh1/Desktop/Modellytics/Mobile/EyeQ/node_modules/@react-navigation/native/dist/utils/invariant.js"],"names":["validateFormat","__DEV__","format","undefined","Error","invariant","condition","a","b","c","d","e","f","error","args","argIndex","replace","name","framesToPop","module","exports"],"mappings":"AAWA,IAAIA,cAAc,GAAG,0BAAY,CAAE,CAAnC;;AAEA,IAAIC,OAAJ,EAAa;AACXD,EAAAA,cAAc,GAAG,wBAAUE,MAAV,EAAkB;AACjC,QAAIA,MAAM,KAAKC,SAAf,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;AACF,GAJD;AAKD;;AAED,SAASC,SAAT,CAAmBC,SAAnB,EAA8BJ,MAA9B,EAAsCK,CAAtC,EAAyCC,CAAzC,EAA4CC,CAA5C,EAA+CC,CAA/C,EAAkDC,CAAlD,EAAqDC,CAArD,EAAwD;AACtDZ,EAAAA,cAAc,CAACE,MAAD,CAAd;;AAEA,MAAI,CAACI,SAAL,EAAgB;AACd,QAAIO,KAAJ;;AACA,QAAIX,MAAM,KAAKC,SAAf,EAA0B;AACxBU,MAAAA,KAAK,GAAG,IAAIT,KAAJ,CAAU,+HAAV,CAAR;AACD,KAFD,MAEO;AACL,UAAIU,IAAI,GAAG,CAACP,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,CAAX;AACA,UAAIG,QAAQ,GAAG,CAAf;AACAF,MAAAA,KAAK,GAAG,IAAIT,KAAJ,CAAUF,MAAM,CAACc,OAAP,CAAe,KAAf,EAAsB,YAAY;AAClD,eAAOF,IAAI,CAACC,QAAQ,EAAT,CAAX;AACD,OAFiB,CAAV,CAAR;AAGAF,MAAAA,KAAK,CAACI,IAAN,GAAa,qBAAb;AACD;;AAEDJ,IAAAA,KAAK,CAACK,WAAN,GAAoB,CAApB;AACA,UAAML,KAAN;AACD;AACF;;AAGDM,MAAM,CAACC,OAAP,GAAiBf,SAAjB","sourcesContent":["/**\r\n * Use invariant() to assert state which your program assumes to be true.\r\n *\r\n * Provide sprintf-style format (only %s is supported) and arguments\r\n * to provide information about what broke and what you were\r\n * expecting.\r\n *\r\n * The invariant message will be stripped in production, but the invariant\r\n * will remain to ensure logic does not differ in production.\r\n */\r\n\r\nvar validateFormat = function () {};\r\n\r\nif (__DEV__) {\r\n  validateFormat = function (format) {\r\n    if (format === undefined) {\r\n      throw new Error('invariant requires an error message argument');\r\n    }\r\n  };\r\n}\r\n\r\nfunction invariant(condition, format, a, b, c, d, e, f) {\r\n  validateFormat(format);\r\n\r\n  if (!condition) {\r\n    var error;\r\n    if (format === undefined) {\r\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\r\n    } else {\r\n      var args = [a, b, c, d, e, f];\r\n      var argIndex = 0;\r\n      error = new Error(format.replace(/%s/g, function () {\r\n        return args[argIndex++];\r\n      }));\r\n      error.name = 'Invariant Violation';\r\n    }\r\n\r\n    error.framesToPop = 1; // we don't care about invariant's own frame\r\n    throw error;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line import/no-commonjs\r\nmodule.exports = invariant;"]},"metadata":{},"sourceType":"script"}