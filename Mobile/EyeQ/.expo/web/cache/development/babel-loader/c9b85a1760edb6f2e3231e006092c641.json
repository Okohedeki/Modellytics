{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SwitchRouter, NavigationActions } from '@react-navigation/core';\nimport DrawerActions from \"./DrawerActions\";\n\nfunction withDefaultValue(obj, key, defaultValue) {\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  obj[key] = defaultValue;\n  return obj;\n}\n\nvar getActiveRouteKey = function getActiveRouteKey(route) {\n  if (route.routes && route.routes[route.index]) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n\n  return route.key;\n};\n\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = _objectSpread({}, config);\n  config = withDefaultValue(config, 'resetOnBlur', config.unmountInactiveRoutes ? true : !!config.resetOnBlur);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n  var switchRouter = SwitchRouter(routeConfigs, config);\n\n  var __id = -1;\n\n  var genId = function genId() {\n    __id++;\n    return __id;\n  };\n\n  return _objectSpread(_objectSpread({}, switchRouter), {}, {\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _objectSpread({\n        openDrawer: function openDrawer() {\n          return DrawerActions.openDrawer({\n            key: navStateKey\n          });\n        },\n        closeDrawer: function closeDrawer() {\n          return DrawerActions.closeDrawer({\n            key: navStateKey\n          });\n        },\n        toggleDrawer: function toggleDrawer() {\n          return DrawerActions.toggleDrawer({\n            key: navStateKey\n          });\n        }\n      }, switchRouter.getActionCreators(route, navStateKey));\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return _objectSpread(_objectSpread({}, switchRouter.getStateForAction(action, undefined)), {}, {\n          isDrawerOpen: false,\n          isDrawerIdle: true,\n          drawerMovementDirection: null,\n          openId: genId(),\n          closeId: genId(),\n          toggleId: genId()\n        });\n      }\n\n      var isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        if (action.type === DrawerActions.DRAWER_CLOSED) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isDrawerOpen: false,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          });\n        }\n\n        if (action.type === DrawerActions.DRAWER_OPENED) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isDrawerOpen: true,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          });\n        }\n\n        if (action.type === DrawerActions.CLOSE_DRAWER) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            closeId: genId()\n          });\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_SETTLING) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isDrawerIdle: false,\n            drawerMovementDirection: action.willShow ? 'opening' : 'closing'\n          });\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_ACTIVE) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isDrawerIdle: false,\n            drawerMovementDirection: null\n          });\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_IDLE) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          });\n        }\n\n        if (action.type === NavigationActions.BACK && (state.isDrawerOpen || !state.isDrawerIdle) && state.drawerMovementDirection !== 'closing') {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            closeId: genId()\n          });\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            openId: genId()\n          });\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            toggleId: genId()\n          });\n        }\n      }\n\n      var switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        return null;\n      }\n\n      if (switchedState !== state) {\n        if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state) && (state.isDrawerOpen || state.drawerMovementDirection !== 'closing')) {\n          return _objectSpread(_objectSpread({}, switchedState), {}, {\n            closeId: genId()\n          });\n        }\n\n        return switchedState;\n      }\n\n      return state;\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/Edeki Okoh1/Desktop/Modellytics/Mobile/EyeQ/node_modules/react-navigation-drawer/dist/routers/DrawerRouter.js"],"names":["SwitchRouter","NavigationActions","DrawerActions","withDefaultValue","obj","key","defaultValue","hasOwnProperty","getActiveRouteKey","route","routes","index","routeConfigs","config","unmountInactiveRoutes","resetOnBlur","switchRouter","__id","genId","getActionCreators","navStateKey","openDrawer","closeDrawer","toggleDrawer","getStateForAction","action","state","undefined","isDrawerOpen","isDrawerIdle","drawerMovementDirection","openId","closeId","toggleId","isRouterTargeted","type","DRAWER_CLOSED","DRAWER_OPENED","CLOSE_DRAWER","MARK_DRAWER_SETTLING","willShow","MARK_DRAWER_ACTIVE","MARK_DRAWER_IDLE","BACK","OPEN_DRAWER","TOGGLE_DRAWER","switchedState"],"mappings":"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","sourcesContent":["import { SwitchRouter, NavigationActions } from '@react-navigation/core';\r\nimport DrawerActions from './DrawerActions';\r\n\r\nfunction withDefaultValue(obj, key, defaultValue) {\r\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\r\n    return obj;\r\n  }\r\n\r\n  obj[key] = defaultValue;\r\n  return obj;\r\n}\r\n\r\nconst getActiveRouteKey = route => {\r\n  if (route.routes && route.routes[route.index]) {\r\n    return getActiveRouteKey(route.routes[route.index]);\r\n  }\r\n  return route.key;\r\n};\r\n\r\nexport default ((routeConfigs, config = {}) => {\r\n  config = { ...config };\r\n  config = withDefaultValue(config, 'resetOnBlur', config.unmountInactiveRoutes ? true : !!config.resetOnBlur);\r\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\r\n\r\n  const switchRouter = SwitchRouter(routeConfigs, config);\r\n\r\n  let __id = -1;\r\n  const genId = () => {\r\n    __id++;\r\n    return __id;\r\n  };\r\n\r\n  return {\r\n    ...switchRouter,\r\n\r\n    getActionCreators(route, navStateKey) {\r\n      return {\r\n        openDrawer: () => DrawerActions.openDrawer({ key: navStateKey }),\r\n        closeDrawer: () => DrawerActions.closeDrawer({ key: navStateKey }),\r\n        toggleDrawer: () => DrawerActions.toggleDrawer({ key: navStateKey }),\r\n        ...switchRouter.getActionCreators(route, navStateKey)\r\n      };\r\n    },\r\n\r\n    getStateForAction(action, state) {\r\n      // Set up the initial state if needed\r\n      if (!state) {\r\n        return {\r\n          ...switchRouter.getStateForAction(action, undefined),\r\n          isDrawerOpen: false,\r\n          isDrawerIdle: true,\r\n          drawerMovementDirection: null,\r\n          openId: genId(),\r\n          closeId: genId(),\r\n          toggleId: genId()\r\n        };\r\n      }\r\n\r\n      const isRouterTargeted = action.key == null || action.key === state.key;\r\n\r\n      if (isRouterTargeted) {\r\n        // Only handle actions that are meant for this drawer, as specified by action.key.\r\n\r\n        if (action.type === DrawerActions.DRAWER_CLOSED) {\r\n          return {\r\n            ...state,\r\n            isDrawerOpen: false,\r\n            isDrawerIdle: true,\r\n            drawerMovementDirection: null\r\n          };\r\n        }\r\n\r\n        if (action.type === DrawerActions.DRAWER_OPENED) {\r\n          return {\r\n            ...state,\r\n            isDrawerOpen: true,\r\n            isDrawerIdle: true,\r\n            drawerMovementDirection: null\r\n          };\r\n        }\r\n\r\n        if (action.type === DrawerActions.CLOSE_DRAWER) {\r\n          return {\r\n            ...state,\r\n            closeId: genId()\r\n          };\r\n        }\r\n\r\n        if (action.type === DrawerActions.MARK_DRAWER_SETTLING) {\r\n          return {\r\n            ...state,\r\n            isDrawerIdle: false,\r\n            drawerMovementDirection: action.willShow ? 'opening' : 'closing'\r\n          };\r\n        }\r\n\r\n        if (action.type === DrawerActions.MARK_DRAWER_ACTIVE) {\r\n          return {\r\n            ...state,\r\n            isDrawerIdle: false,\r\n            drawerMovementDirection: null\r\n          };\r\n        }\r\n\r\n        if (action.type === DrawerActions.MARK_DRAWER_IDLE) {\r\n          return {\r\n            ...state,\r\n            isDrawerIdle: true,\r\n            drawerMovementDirection: null\r\n          };\r\n        }\r\n\r\n        if (action.type === NavigationActions.BACK && (state.isDrawerOpen || !state.isDrawerIdle) && state.drawerMovementDirection !== 'closing') {\r\n          return {\r\n            ...state,\r\n            closeId: genId()\r\n          };\r\n        }\r\n\r\n        if (action.type === DrawerActions.OPEN_DRAWER) {\r\n          return {\r\n            ...state,\r\n            openId: genId()\r\n          };\r\n        }\r\n\r\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\r\n          return {\r\n            ...state,\r\n            toggleId: genId()\r\n          };\r\n        }\r\n      }\r\n\r\n      // Fall back on switch router for screen switching logic, and handling of child routers\r\n      const switchedState = switchRouter.getStateForAction(action, state);\r\n\r\n      if (switchedState === null) {\r\n        // The switch router or a child router is attempting to swallow this action. We return null to allow this.\r\n        return null;\r\n      }\r\n\r\n      // Has the switch router changed the state?\r\n      if (switchedState !== state) {\r\n        // If any navigation has happened, and the drawer is maybe open, make sure to close it\r\n        if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state) && (state.isDrawerOpen || state.drawerMovementDirection !== 'closing')) {\r\n          return {\r\n            ...switchedState,\r\n            closeId: genId()\r\n          };\r\n        }\r\n\r\n        // At this point, return the state as defined by the switch router.\r\n        // The active route key hasn't changed, so this most likely means that a child router has returned\r\n        // a new state like a param change, but the same key is still active and the drawer will remain open\r\n        return switchedState;\r\n      }\r\n\r\n      return state;\r\n    }\r\n  };\r\n});"]},"metadata":{},"sourceType":"module"}