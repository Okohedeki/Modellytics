{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Edeki Okoh1\\\\Desktop\\\\Modellytics\\\\Mobile\\\\EyeQ\\\\node_modules\\\\react-navigation-tabs\\\\src\\\\views\\\\MaterialTopTabBar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport CrossFadeIcon from \"./CrossFadeIcon\";\n\nvar TabBarTop = function (_React$PureComponent) {\n  _inherits(TabBarTop, _React$PureComponent);\n\n  var _super = _createSuper(TabBarTop);\n\n  function TabBarTop() {\n    var _this;\n\n    _classCallCheck(this, TabBarTop);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._renderLabel = function (_ref) {\n      var route = _ref.route;\n      var _this$props = _this.props,\n          position = _this$props.position,\n          navigation = _this$props.navigation,\n          activeTintColor = _this$props.activeTintColor,\n          inactiveTintColor = _this$props.inactiveTintColor,\n          showLabel = _this$props.showLabel,\n          upperCaseLabel = _this$props.upperCaseLabel,\n          labelStyle = _this$props.labelStyle,\n          allowFontScaling = _this$props.allowFontScaling;\n\n      if (showLabel === false) {\n        return null;\n      }\n\n      var routes = navigation.state.routes;\n      var index = routes.indexOf(route);\n      var focused = index === navigation.state.index;\n      var inputRange = [-1].concat(_toConsumableArray(routes.map(function (x, i) {\n        return i;\n      })));\n      var outputRange = inputRange.map(function (inputIndex) {\n        return inputIndex === index ? activeTintColor : inactiveTintColor;\n      });\n      var color = position.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange\n      });\n      var tintColor = focused ? activeTintColor : inactiveTintColor;\n\n      var label = _this.props.getLabelText({\n        route: route\n      });\n\n      if (typeof label === 'string') {\n        return React.createElement(Animated.Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 9\n          }\n        }, upperCaseLabel ? label.toUpperCase() : label);\n      }\n\n      if (typeof label === 'function') {\n        return label({\n          focused: focused,\n          tintColor: tintColor\n        });\n      }\n\n      return label;\n    };\n\n    _this._renderIcon = function (_ref2) {\n      var route = _ref2.route;\n      var _this$props2 = _this.props,\n          position = _this$props2.position,\n          navigation = _this$props2.navigation,\n          activeTintColor = _this$props2.activeTintColor,\n          inactiveTintColor = _this$props2.inactiveTintColor,\n          renderIcon = _this$props2.renderIcon,\n          showIcon = _this$props2.showIcon,\n          iconStyle = _this$props2.iconStyle;\n\n      if (showIcon === false) {\n        return null;\n      }\n\n      var index = navigation.state.routes.indexOf(route);\n      var inputRange = [-1].concat(_toConsumableArray(navigation.state.routes.map(function (x, i) {\n        return i;\n      })));\n      var activeOpacity = position.interpolate({\n        inputRange: inputRange,\n        outputRange: inputRange.map(function (i) {\n          return i === index ? 1 : 0;\n        })\n      });\n      var inactiveOpacity = position.interpolate({\n        inputRange: inputRange,\n        outputRange: inputRange.map(function (i) {\n          return i === index ? 0 : 1;\n        })\n      });\n      return React.createElement(CrossFadeIcon, {\n        route: route,\n        navigation: navigation,\n        activeOpacity: activeOpacity,\n        inactiveOpacity: inactiveOpacity,\n        activeTintColor: activeTintColor,\n        inactiveTintColor: inactiveTintColor,\n        renderIcon: renderIcon,\n        style: [styles.icon, iconStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 7\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TabBarTop, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          renderIcon = _this$props3.renderIcon,\n          getLabelText = _this$props3.getLabelText,\n          rest = _objectWithoutProperties(_this$props3, [\"navigation\", \"renderIcon\", \"getLabelText\"]);\n\n      return React.createElement(TabBar, _extends({}, rest, {\n        navigationState: navigation.state,\n        renderIcon: this._renderIcon,\n        renderLabel: this._renderLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return TabBarTop;\n}(React.PureComponent);\n\nTabBarTop.defaultProps = {\n  activeTintColor: '#fff',\n  inactiveTintColor: '#fff',\n  showIcon: false,\n  showLabel: true,\n  upperCaseLabel: true,\n  allowFontScaling: true\n};\nexport { TabBarTop as default };\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 8,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["C:/Users/Edeki Okoh1/Desktop/Modellytics/Mobile/EyeQ/node_modules/react-navigation-tabs/src/views/MaterialTopTabBar.js"],"names":["React","TabBar","CrossFadeIcon","TabBarTop","_renderLabel","route","props","position","navigation","activeTintColor","inactiveTintColor","showLabel","upperCaseLabel","labelStyle","allowFontScaling","routes","state","index","indexOf","focused","inputRange","map","x","i","outputRange","inputIndex","color","interpolate","tintColor","label","getLabelText","styles","toUpperCase","_renderIcon","renderIcon","showIcon","iconStyle","activeOpacity","inactiveOpacity","icon","rest","PureComponent","defaultProps","StyleSheet","create","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport { Animated, StyleSheet } from 'react-native';\r\nimport { TabBar } from 'react-native-tab-view';\r\nimport CrossFadeIcon from './CrossFadeIcon';\r\n\r\nexport type TabBarOptions = {\r\n  activeTintColor?: string,\r\n  inactiveTintColor?: string,\r\n  showLabel?: boolean,\r\n  showIcon?: boolean,\r\n  upperCaseLabel?: boolean,\r\n  labelStyle?: any,\r\n  iconStyle?: any,\r\n  allowFontScaling?: boolean,\r\n};\r\n\r\ntype Props = TabBarOptions & {\r\n  position: Animated.Value,\r\n  offsetX: Animated.Value,\r\n  panX: Animated.Value,\r\n  layout: any,\r\n  navigation: any,\r\n  renderIcon: (props: {\r\n    route: any,\r\n    focused: boolean,\r\n    tintColor: string,\r\n  }) => React.Node,\r\n  getLabelText: (props: { route: any }) => any,\r\n  getAccessibilityLabel: (props: { route: any }) => string,\r\n  getTestID: (props: { route: any }) => string,\r\n  useNativeDriver?: boolean,\r\n  jumpTo: (key: string) => any,\r\n};\r\n\r\nexport default class TabBarTop extends React.PureComponent<Props> {\r\n  static defaultProps = {\r\n    activeTintColor: '#fff',\r\n    inactiveTintColor: '#fff',\r\n    showIcon: false,\r\n    showLabel: true,\r\n    upperCaseLabel: true,\r\n    allowFontScaling: true,\r\n  };\r\n\r\n  _renderLabel = ({ route }) => {\r\n    const {\r\n      position,\r\n      navigation,\r\n      activeTintColor,\r\n      inactiveTintColor,\r\n      showLabel,\r\n      upperCaseLabel,\r\n      labelStyle,\r\n      allowFontScaling,\r\n    } = this.props;\r\n\r\n    if (showLabel === false) {\r\n      return null;\r\n    }\r\n\r\n    const { routes } = navigation.state;\r\n    const index = routes.indexOf(route);\r\n    const focused = index === navigation.state.index;\r\n\r\n    // Prepend '-1', so there are always at least 2 items in inputRange\r\n    const inputRange = [-1, ...routes.map((x, i) => i)];\r\n    const outputRange = inputRange.map(inputIndex =>\r\n      inputIndex === index ? activeTintColor : inactiveTintColor\r\n    );\r\n    const color = position.interpolate({\r\n      inputRange,\r\n      outputRange: outputRange,\r\n    });\r\n\r\n    const tintColor = focused ? activeTintColor : inactiveTintColor;\r\n    const label = this.props.getLabelText({ route });\r\n\r\n    if (typeof label === 'string') {\r\n      return (\r\n        <Animated.Text\r\n          style={[styles.label, { color }, labelStyle]}\r\n          allowFontScaling={allowFontScaling}\r\n        >\r\n          {upperCaseLabel ? label.toUpperCase() : label}\r\n        </Animated.Text>\r\n      );\r\n    }\r\n    if (typeof label === 'function') {\r\n      return label({ focused, tintColor });\r\n    }\r\n\r\n    return label;\r\n  };\r\n\r\n  _renderIcon = ({ route }) => {\r\n    const {\r\n      position,\r\n      navigation,\r\n      activeTintColor,\r\n      inactiveTintColor,\r\n      renderIcon,\r\n      showIcon,\r\n      iconStyle,\r\n    } = this.props;\r\n\r\n    if (showIcon === false) {\r\n      return null;\r\n    }\r\n\r\n    const index = navigation.state.routes.indexOf(route);\r\n\r\n    // Prepend '-1', so there are always at least 2 items in inputRange\r\n    const inputRange = [-1, ...navigation.state.routes.map((x, i) => i)];\r\n    const activeOpacity = position.interpolate({\r\n      inputRange,\r\n      outputRange: inputRange.map(i => (i === index ? 1 : 0)),\r\n    });\r\n    const inactiveOpacity = position.interpolate({\r\n      inputRange,\r\n      outputRange: inputRange.map(i => (i === index ? 0 : 1)),\r\n    });\r\n\r\n    return (\r\n      <CrossFadeIcon\r\n        route={route}\r\n        navigation={navigation}\r\n        activeOpacity={activeOpacity}\r\n        inactiveOpacity={inactiveOpacity}\r\n        activeTintColor={activeTintColor}\r\n        inactiveTintColor={inactiveTintColor}\r\n        renderIcon={renderIcon}\r\n        style={[styles.icon, iconStyle]}\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    /* eslint-disable no-unused-vars */\r\n    const { navigation, renderIcon, getLabelText, ...rest } = this.props;\r\n\r\n    return (\r\n      /* $FlowFixMe */\r\n      <TabBar\r\n        {...rest}\r\n        navigationState={navigation.state}\r\n        renderIcon={this._renderIcon}\r\n        renderLabel={this._renderLabel}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  icon: {\r\n    height: 24,\r\n    width: 24,\r\n  },\r\n  label: {\r\n    textAlign: 'center',\r\n    fontSize: 13,\r\n    margin: 8,\r\n    backgroundColor: 'transparent',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}